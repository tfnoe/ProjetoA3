/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package View;

import DAO.ConexaoDAO;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.AbstractAction;
import javax.swing.KeyStroke;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.JTable;


/**
 *
 * @author tf_noe
 */
public class FRM_EquipeProjeto extends javax.swing.JDialog {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(FRM_EquipeProjeto.class.getName());
    public String TpBusca;

    /**
     * Creates new form FRM_EquipeProjeto
     */
public FRM_EquipeProjeto(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);

        table_equipeprojeto.getInputMap(JTable.WHEN_FOCUSED).put(
            KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), "deleteRow"
        );

        table_equipeprojeto.getActionMap().put("deleteRow", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                excluirUsuarioSelecionado();
            }
        });
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        txt_nmprojeto = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        rd_username = new javax.swing.JRadioButton();
        rd_nmusuario = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        txt_buscausuario = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_buscausuario = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        txt_idprojeto = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        table_equipeprojeto = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Projeto:");

        buttonGroup1.add(rd_username);
        rd_username.setSelected(true);
        rd_username.setText("User Name");
        rd_username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rd_usernameActionPerformed(evt);
            }
        });

        buttonGroup1.add(rd_nmusuario);
        rd_nmusuario.setText("Nome Usuario");
        rd_nmusuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rd_nmusuarioActionPerformed(evt);
            }
        });

        jLabel2.setText("Busca:");

        txt_buscausuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_buscausuarioActionPerformed(evt);
            }
        });
        txt_buscausuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_buscausuarioKeyReleased(evt);
            }
        });

        table_buscausuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id Usuario", "User Name", "Nome", "Função"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_buscausuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_buscausuarioMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table_buscausuario);
        if (table_buscausuario.getColumnModel().getColumnCount() > 0) {
            table_buscausuario.getColumnModel().getColumn(0).setResizable(false);
            table_buscausuario.getColumnModel().getColumn(0).setPreferredWidth(5);
            table_buscausuario.getColumnModel().getColumn(1).setResizable(false);
            table_buscausuario.getColumnModel().getColumn(1).setPreferredWidth(10);
            table_buscausuario.getColumnModel().getColumn(2).setResizable(false);
            table_buscausuario.getColumnModel().getColumn(2).setPreferredWidth(150);
            table_buscausuario.getColumnModel().getColumn(3).setResizable(false);
            table_buscausuario.getColumnModel().getColumn(3).setPreferredWidth(50);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rd_username)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rd_nmusuario)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_buscausuario, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 591, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_buscausuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rd_nmusuario)
                    .addComponent(rd_username)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 262, Short.MAX_VALUE)
        );

        txt_idprojeto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_idprojetoFocusLost(evt);
            }
        });

        jLabel3.setText("Equipe do Projeto:");

        table_equipeprojeto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id Usuario", "User Name", "Nome", "Função"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_equipeprojeto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_equipeprojetoMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(table_equipeprojeto);
        if (table_equipeprojeto.getColumnModel().getColumnCount() > 0) {
            table_equipeprojeto.getColumnModel().getColumn(0).setResizable(false);
            table_equipeprojeto.getColumnModel().getColumn(0).setPreferredWidth(5);
            table_equipeprojeto.getColumnModel().getColumn(1).setResizable(false);
            table_equipeprojeto.getColumnModel().getColumn(1).setPreferredWidth(10);
            table_equipeprojeto.getColumnModel().getColumn(2).setResizable(false);
            table_equipeprojeto.getColumnModel().getColumn(2).setPreferredWidth(150);
            table_equipeprojeto.getColumnModel().getColumn(3).setResizable(false);
            table_equipeprojeto.getColumnModel().getColumn(3).setPreferredWidth(50);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_idprojeto, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_nmprojeto, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_nmprojeto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txt_idprojeto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void rd_usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rd_usernameActionPerformed
        carregarDadosBuscaUsuario();        // TODO add your handling code here:
    }//GEN-LAST:event_rd_usernameActionPerformed

    private void carregarDadosUsuarioProjeto() {
    DefaultTableModel modelo = (DefaultTableModel) this.table_equipeprojeto.getModel();
    modelo.setRowCount(0);

    String textoIdProjeto = txt_idprojeto.getText().trim();

    // Se o campo do projeto estiver vazio, não carrega nada
    if (textoIdProjeto.isEmpty()) {
        return;
    }

    String sql = "SELECT "
            + "    u.id_usuario, "
            + "    u.nm_usuario, "
            + "    u.user_name, "
            + "    u.tp_acesso, "
            + "    u.status_usuario "
            + "FROM tbl_projetousuario pu "
            + "INNER JOIN tbl_usuario u ON pu.id_usuario = u.id_usuario "
            + "WHERE pu.id_projeto = ?";

    try (Connection conexao = new ConexaoDAO().conectaBD();
         PreparedStatement stmt = conexao.prepareStatement(sql)) {

        int buscaprojeto = Integer.parseInt(textoIdProjeto);
        stmt.setInt(1, buscaprojeto);

        try (ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                modelo.addRow(new Object[]{
                        rs.getInt("id_usuario"),
                        rs.getString("user_name"),
                        rs.getString("nm_usuario"),
                        rs.getString("tp_acesso"),
                        rs.getString("status_usuario")
                });
            }
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this,
                "Erro ao carregar Usuarios do Projeto:\n" + e.getMessage(),
                "Erro de Banco de Dados",
                JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}


    private String getStatusSelecionado() {
        if (rd_username.isSelected()) {
            return "UserName";
        } else if (rd_nmusuario.isSelected()) {
            return "NmUsuario";
        }
        return "UserName";
    }

    private void carregarDadosBuscaUsuario() {
        DefaultTableModel modelo = (DefaultTableModel) this.table_buscausuario.getModel();
        String buscausuario = txt_buscausuario.getText().trim();
        modelo.setRowCount(0);
        String tpBusca = getStatusSelecionado(); // Nome corrigido

        String sql;

        if (buscausuario.isEmpty()) {
            // Caso o campo de busca esteja vazio, seleciona todos os usuários.
            sql = "SELECT id_usuario, nm_usuario, tp_acesso, user_name, email_usuario, status_usuario "
                    + "FROM tbl_usuario "
                    + "ORDER BY tp_acesso, nm_usuario";
        } else {
            if ("UserName".equalsIgnoreCase(tpBusca)) {
                sql = "SELECT id_usuario, nm_usuario, tp_acesso, user_name, email_usuario, status_usuario "
                        + "FROM tbl_usuario "
                        + "WHERE user_name LIKE ? AND status_usuario = 'A' "
                        + "ORDER BY tp_acesso,nm_usuario";
            } else if ("NmUsuario".equalsIgnoreCase(tpBusca)) {
                sql = "SELECT id_usuario, nm_usuario, tp_acesso, user_name, email_usuario, status_usuario "
                        + "FROM tbl_usuario "
                        + "WHERE nm_usuario LIKE ? AND status_usuario = 'A' "
                        + "ORDER BY tp_acesso,nm_usuario";
            } else if ("IdUsuario".equalsIgnoreCase(tpBusca)) {
                sql = "SELECT id_usuario, nm_usuario, tp_acesso, user_name, email_usuario, status_usuario "
                        + "FROM tbl_usuario "
                        + "WHERE CAST(id_usuario AS VARCHAR) LIKE ? AND status_usuario = 'A' "
                        + "ORDER BY tp_acesso,nm_usuario";
            } else {
                // Caso não reconheça o tipo de busca
                JOptionPane.showMessageDialog(this, "Tipo de busca inválido.");
                return;
            }
        }

        try (Connection conexao = new ConexaoDAO().conectaBD(); PreparedStatement stmt = conexao.prepareStatement(sql)) {

            if (!buscausuario.isEmpty()) {
                stmt.setString(1, "%" + buscausuario + "%");
            }

            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    modelo.addRow(new Object[]{
                        rs.getInt("id_usuario"),
                        rs.getString("user_name"),
                        rs.getString("nm_usuario"),
                        rs.getString("tp_acesso")
                    });
                }
            }
        } catch (SQLException e) {
            modelo.setRowCount(0);

//JOptionPane.showMessageDialog(this, "Erro ao carregar dados dos usuários:\n" + e.getMessage(),
            //        "Erro de Banco de Dados", JOptionPane.ERROR_MESSAGE);
            // e.printStackTrace();
        }
    }


    private void txt_idprojetoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_idprojetoFocusLost
        carregarNomeProjeto();
        carregarDadosUsuarioProjeto();
    }//GEN-LAST:event_txt_idprojetoFocusLost

    private void txt_buscausuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_buscausuarioActionPerformed
        carregarDadosBuscaUsuario();
    }//GEN-LAST:event_txt_buscausuarioActionPerformed

    private void rd_nmusuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rd_nmusuarioActionPerformed
        carregarDadosBuscaUsuario();        // TODO add your handling code here:
    }//GEN-LAST:event_rd_nmusuarioActionPerformed

    private void txt_buscausuarioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_buscausuarioKeyReleased
        carregarDadosBuscaUsuario();  // TODO add your handling code here:
    }//GEN-LAST:event_txt_buscausuarioKeyReleased

    private boolean existeGerenteNoProjeto(int idProjeto) {
        String sql = "SELECT COUNT(*) AS qtd "
                + "FROM tbl_projetousuario pu "
                + "INNER JOIN tbl_usuario u ON pu.id_usuario = u.id_usuario "
                + "WHERE pu.id_projeto = ? AND u.tp_acesso = 'Gerente'";

        try (Connection conexao = new ConexaoDAO().conectaBD(); PreparedStatement stmt = conexao.prepareStatement(sql)) {

            stmt.setInt(1, idProjeto);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("qtd") > 0;
                }
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "Erro ao verificar gerente do projeto:\n" + e.getMessage(),
                    "Erro de Banco de Dados", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        return false;
    }

    private boolean existeUsuarioNoProjeto(int idProjeto, int idUsuario) {
        String sql = "SELECT COUNT(*) AS qtd "
                + "FROM tbl_projetousuario pu "
                + //"INNER JOIN tbl_usuario u ON pu.id_usuario = u.id_usuario " +
                "WHERE pu.id_projeto = ? AND pu.id_usuario = ?";

        try (Connection conexao = new ConexaoDAO().conectaBD(); PreparedStatement stmt = conexao.prepareStatement(sql)) {

            stmt.setInt(1, idProjeto);
            stmt.setInt(2, idUsuario);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("qtd") > 0;
                }
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "Erro ao verificar usuario do projeto:\n" + e.getMessage(),
                    "Erro de Banco de Dados", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        return false;
    }

    private void table_buscausuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_buscausuarioMouseClicked
        // 1. Verificar se foi um duplo-clique
        if (evt.getClickCount() == 2) {

            // 2. Pegar a linha selecionada
            int linhaSelecionada = this.table_buscausuario.getSelectedRow();

            // 3. Obter os dados da linha selecionada
            int idProjeto = Integer.parseInt(txt_idprojeto.getText());
            int idusuario = (int) this.table_buscausuario.getValueAt(linhaSelecionada, 0);
            String tp_acesso = (String) this.table_buscausuario.getValueAt(linhaSelecionada, 3);

            String sql;

            if ("Gerente".equalsIgnoreCase(tp_acesso) && existeGerenteNoProjeto(idProjeto)) {
                JOptionPane.showMessageDialog(this,
                        "Este projeto já possui um usuário com acesso de GERENTE!",
                        "Validação", JOptionPane.WARNING_MESSAGE);
            } else if (existeUsuarioNoProjeto(idProjeto, idusuario)) {
                JOptionPane.showMessageDialog(this,
                        "Usuário já adicionado ao Projeto!",
                        "Validação", JOptionPane.WARNING_MESSAGE);

            } else {
                sql = "insert into tbl_projetousuario (id_projeto, id_usuario) values (?,?)";

                try (Connection conexao = new ConexaoDAO().conectaBD(); PreparedStatement stmt = conexao.prepareStatement(sql)) {

                    stmt.setInt(1, idProjeto);
                    stmt.setInt(2, idusuario);

                    stmt.executeUpdate();

                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null,
                            "Erro ao verificar gerente do projeto:\n" + e.getMessage(),
                            "Erro de Banco de Dados", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                }

            }

            carregarDadosUsuarioProjeto();
        }
    }//GEN-LAST:event_table_buscausuarioMouseClicked

    private void table_equipeprojetoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_equipeprojetoMouseClicked
        if (evt.getClickCount() == 2) {
            excluirUsuarioSelecionado();
        }
    }//GEN-LAST:event_table_equipeprojetoMouseClicked

    private void excluirUsuarioSelecionado() {
        int linhaSelecionada = table_equipeprojeto.getSelectedRow();

        if (linhaSelecionada >= 0) {
            int idProjeto = Integer.parseInt(txt_idprojeto.getText());
            int idusuario = (int) table_equipeprojeto.getValueAt(linhaSelecionada, 0);

            int confirmacao = JOptionPane.showConfirmDialog(
                    null,
                    "Tem certeza que deseja deletar o usuário selecionado?",
                    "Confirmação de Exclusão",
                    JOptionPane.YES_NO_OPTION
            );

            if (confirmacao == JOptionPane.YES_OPTION) {
                String sql = "delete from tbl_projetousuario where id_projeto = ? and id_usuario = ?";

                try (Connection conexao = new ConexaoDAO().conectaBD(); PreparedStatement stmt = conexao.prepareStatement(sql)) {

                    stmt.setInt(1, idProjeto);
                    stmt.setInt(2, idusuario);

                    stmt.executeUpdate();

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(
                            null,
                            "Erro ao deletar usuario do projeto:\n" + ex.getMessage(),
                            "Erro de Banco de Dados", JOptionPane.ERROR_MESSAGE
                    );
                    ex.printStackTrace();
                }

                carregarDadosUsuarioProjeto();
            }
        }
    }

    private void carregarNomeProjeto() {
        String textoIdProjeto = txt_idprojeto.getText().trim();

        if (textoIdProjeto.isEmpty()) {
            txt_nmprojeto.setText("");
            return;
        }

        String sql = "SELECT nm_projeto FROM tbl_projeto WHERE id_projeto = ?";

        try (Connection conexao = new ConexaoDAO().conectaBD(); PreparedStatement stmt = conexao.prepareStatement(sql)) {

            int idProjeto = Integer.parseInt(textoIdProjeto);
            stmt.setInt(1, idProjeto);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    txt_nmprojeto.setText(rs.getString("nm_projeto"));
                } else {
                    txt_nmprojeto.setText("Projeto não encontrado");
                }
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Digite um número válido para o ID do projeto.");
            txt_nmprojeto.setText("Projeto Não Encontrado");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao buscar nome do projeto:\n" + e.getMessage(),
                    "Erro de Banco de Dados", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                FRM_EquipeProjeto dialog = new FRM_EquipeProjeto(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JRadioButton rd_nmusuario;
    private javax.swing.JRadioButton rd_username;
    private javax.swing.JTable table_buscausuario;
    private javax.swing.JTable table_equipeprojeto;
    private javax.swing.JTextField txt_buscausuario;
    private javax.swing.JTextField txt_idprojeto;
    private javax.swing.JTextField txt_nmprojeto;
    // End of variables declaration//GEN-END:variables
}
